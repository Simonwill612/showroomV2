package main

import (
	"context"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"strconv"
	"strings"
	"time"

	"github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/ethereum/go-ethereum/rpc"
	"github.com/joho/godotenv"
)

// const eventName = "Emit" 
 
func main() {
	loadEnv()

	rpcURL := os.Getenv("WS_RPC_URL")
	contractAddr := os.Getenv("CONTRACT_ADDRESS")
	abiFile := os.Getenv("CONTRACT_ABI_FILE")

	client := connectToClient(rpcURL)
	defer client.Close()

	parsedABI := parseContractABIFromFile(abiFile)
	logs := make(chan types.Log)
	sub := subscribeToEvents(client, logs, contractAddr)

	fmt.Println("‚úÖ Listening for Emit events from tableHandleAI...")

	handleLogs(client, parsedABI, logs, sub)
}

// --- Load .env
func loadEnv() {
	err := godotenv.Load()
	if err != nil {
		log.Fatalf("‚ùå Failed to load .env file: %v", err)
	}
}

// --- Connect to WebSocket
func connectToClient(url string) *ethclient.Client {
	rpcClient, err := rpc.DialWebsocket(context.Background(), url, "")
	if err != nil {
		log.Fatalf("‚ùå Failed to connect to WebSocket: %v", err)
	}
	return ethclient.NewClient(rpcClient)
}

// --- Read ABI from file
func parseContractABIFromFile(path string) abi.ABI {
	abiBytes, err := ioutil.ReadFile(path)
	if err != nil {
		log.Fatalf("‚ùå Failed to read ABI file: %v", err)
	}
	parsed, err := abi.JSON(strings.NewReader(string(abiBytes)))
	if err != nil {
		log.Fatalf("‚ùå Failed to parse ABI: %v", err)
	}
	return parsed
}

// --- Subscribe to ALL events
func subscribeToEvents(client *ethclient.Client, logs chan types.Log, contractAddr string) ethereum.Subscription {
	query := ethereum.FilterQuery{
		Addresses: []common.Address{common.HexToAddress(contractAddr)},
		// Kh√¥ng c·∫ßn Topics, s·∫Ω nh·∫≠n t·∫•t c·∫£ event
	}
	sub, err := client.SubscribeFilterLogs(context.Background(), query, logs)
	if err != nil {
		log.Fatalf("‚ùå Failed to subscribe to logs: %v", err)
	}
	return sub
}

// --- Handle ALL event logs
func handleLogs(client *ethclient.Client, parsedABI abi.ABI, logs chan types.Log, sub ethereum.Subscription) {
	ticker := time.NewTicker(30 * time.Second)
	defer ticker.Stop()

	for {
		select {
		case <-ticker.C:
			chainID, err := client.ChainID(context.Background())
			if err != nil {
				log.Printf("‚ùå Failed to get chain ID: %v", err)
			} else {
				fmt.Printf("üîó Chain ID: %v\n", chainID)
			}

		case err := <-sub.Err():
			log.Printf("‚ùå Subscription error: %v", err)
			time.Sleep(10 * time.Second)

		case vLog := <-logs:
			event, err := parsedABI.EventByID(vLog.Topics[0])
			if err != nil {
				log.Printf("‚ö†Ô∏è Unknown event: %v", err)
				continue
			}

			// In ra t√™n event v√† d·ªØ li·ªáu
			fmt.Printf("üì¢ Event: %s\n", event.Name)
			switch event.Name {
			case "RaiseTable", "LowerTable", "StopTable":
				var evt struct {
					TableId string
				}
				err := parsedABI.UnpackIntoInterface(&evt, event.Name, vLog.Data)
				if err == nil {
					log.Printf("‚û°Ô∏è %s: tableId = %s", event.Name, evt.TableId)
				}
			case "HeightSet":
				var evt struct {
					TableId string
					Height  uint64
				}
				err := parsedABI.UnpackIntoInterface(&evt, event.Name, vLog.Data)
				if err == nil {
					log.Printf("üìè HeightSet: tableId = %s | height = %d", evt.TableId, evt.Height)
				}
			case "RelayToggled":
				var evt struct {
					TableId string
					On      bool
				}
				err := parsedABI.UnpackIntoInterface(&evt, event.Name, vLog.Data)
				if err == nil {
					log.Printf("üîå RelayToggled: tableId = %s | on = %v", evt.TableId, evt.On)
				}
			case "TableCommand":
				var evt struct {
					TableId string
					Command string
				}
				err := parsedABI.UnpackIntoInterface(&evt, event.Name, vLog.Data)
				if err == nil {
					log.Printf("üìù TableCommand: TableId = %s | command = %s", evt.TableId, evt.Command)
				}
			case "EmitTableData":
				var evt struct {
					TableId   string
					HeightsCm string
				}
				err := parsedABI.UnpackIntoInterface(&evt, event.Name, vLog.Data)
				if err == nil {
					log.Printf("üì¶ EmitTableData: tableId = %s | heightsCm = %s", evt.TableId, evt.HeightsCm)
					go handleHeightChange(evt.TableId, evt.HeightsCm)

				}
			default:
				log.Printf("‚ö†Ô∏è Event %s kh√¥ng ƒë∆∞·ª£c x·ª≠ l√Ω t·ª± ƒë·ªông", event.Name)
			}
		}
	}
}

// --- Logic x·ª≠ l√Ω chi·ªÅu cao b√†n th√¥ng minh
func handleHeightChange(tableId string, heights string) {
	if tableId != "1" {
		log.Println("‚ÑπÔ∏è B·ªè qua TableId kh√¥ng h·ª£p l·ªá:", tableId)
		return
	}

	parts := strings.Split(heights, ",")
	if len(parts) < 2 {
		log.Println("‚ö†Ô∏è heightsCm kh√¥ng h·ª£p l·ªá:", heights)
		return
	}

	currentHeight, err1 := strconv.Atoi(strings.TrimSpace(parts[0]))
	targetHeight, err2 := strconv.Atoi(strings.TrimSpace(parts[1]))
	if err1 != nil || err2 != nil {
		log.Printf("‚ùå L·ªói ph√¢n t√≠ch chi·ªÅu cao: %v | %v\n", err1, err2)
		return
	}

	diff := targetHeight - currentHeight
	if diff <= 0 {
		log.Println("‚õîÔ∏è Kh√¥ng n√¢ng v√¨ chi·ªÅu cao hi·ªán t·∫°i l·ªõn h∆°n ho·∫∑c b·∫±ng m·ª•c ti√™u.")
		return
	}

	// T√≠nh th·ªùi gian n√¢ng
	durationMs := 2000
	if diff > 10 {
		durationMs += ((diff - 10) / 10) * 2000
	}
	log.Printf("üîº N√¢ng t·ª´ %dcm l√™n %dcm | Th·ªùi gian n√¢ng: %dms\n", currentHeight, targetHeight, durationMs)

	// üëâ T·∫°i ƒë√¢y, b·∫°n s·∫Ω t√≠ch h·ª£p GPIO ho·∫∑c command n·ªôi b·ªô ƒë·ªÉ ƒëi·ªÅu khi·ªÉn motor

	time.Sleep(time.Duration(durationMs) * time.Millisecond)
	log.Println("‚èπÔ∏è D·ª´ng sau n√¢ng")

	// H·∫° sau 60 gi√¢y
	time.AfterFunc(60*time.Second, func() {
		downTarget := targetHeight / 2
		downDiff := targetHeight - downTarget
		downDurationMs := 2000
		if downDiff > 10 {
			downDurationMs += ((downDiff - 10) / 10) * 2000
		}
		log.Printf("‚è¨ H·∫° t·ª´ %dcm v·ªÅ %dcm sau 60s | Th·ªùi gian h·∫°: %dms\n", targetHeight, downTarget, downDurationMs)

		// üëâ Th√™m ƒëi·ªÅu khi·ªÉn h·∫° motor t·∫°i ƒë√¢y
		time.Sleep(time.Duration(downDurationMs) * time.Millisecond)
		log.Println("‚èπÔ∏è D·ª´ng sau h·∫°")
	})
}
